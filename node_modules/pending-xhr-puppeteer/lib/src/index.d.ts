import { Request, Page } from 'puppeteer';
interface ResolvableRequest extends Request {
    resolver: () => void;
}
export declare class PendingXHR {
    page: Page;
    resourceType: string;
    pendingXhrs: Set<Request>;
    finishedWithSuccessXhrs: Set<Request>;
    finishedWithErrorsXhrs: Set<Request>;
    promisees: Promise<void>[];
    requestListener: (request: ResolvableRequest) => void;
    requestFailedListener: (request: ResolvableRequest) => void;
    requestFinishedListener: (request: ResolvableRequest) => void;
    constructor(page: Page);
    removePageListeners(): void;
    waitForAllXhrFinished(): Promise<void>;
    waitOnceForAllXhrFinished(): Promise<void>;
    pendingXhrCount(): number;
}
export {};
